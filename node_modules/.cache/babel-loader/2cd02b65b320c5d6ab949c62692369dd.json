{"ast":null,"code":"import { createStore } from 'vuex'; // 本地存储相关方法\n\nconst setLocalCartData = state => {\n  const {\n    cartList\n  } = state;\n  const cartListString = JSON.stringify(cartList);\n  localStorage.cartList = cartListString;\n};\n\nconst getLocalCartData = () => {\n  return localStorage.cartList !== undefined ? JSON.parse(localStorage.cartList) : {};\n};\n\nexport default createStore({\n  state: {\n    // 数据格式: {shopId: { shopName: '', productList: { productId: { ... } } }}\n    cartList: getLocalCartData()\n  },\n  getters: {},\n  mutations: {\n    changeCartItemInfo(state, payload) {\n      // 结构传递过来的数据\n      const {\n        shopId,\n        productId,\n        productInfo\n      } = payload; // 通过商铺ID获取cartlist中的商铺信息, 判断商铺信息是否存在, 没有的话赋值为默认值\n\n      let shopInfo = state.cartList[shopId] || {\n        shopName: '',\n        productList: {}\n      }; // 获取商铺中的商铺\n\n      let product = shopInfo.productList[productId]; // 判断商品是否存在,不存在则将传递过来的商品productinfo保存到product中,将count赋值为0\n\n      if (!product) {\n        product = productInfo;\n        product.count = 0;\n      } // count数值加一\n\n\n      product.count = product.count + payload.number;\n\n      if (payload.number > 0) {\n        product.check = true;\n      } // count的值小于0则重新赋值为0\n\n\n      if (product.count < 0) {\n        product.count = 0;\n      } // 将修改过的product放回商铺中,替换原来的数据\n\n\n      shopInfo.productList[productId] = product; // 将商铺信息存放到cartList中\n\n      state.cartList[shopId] = shopInfo;\n      setLocalCartData(state);\n    },\n\n    // 修改传递过来店铺的名字\n    changeShopName(state, payload) {\n      const {\n        shopId,\n        shopName\n      } = payload;\n      const shopInfo = state.cartList[shopId] || {\n        shopNmae: '',\n        productList: {}\n      };\n      shopInfo.shopName = shopName;\n      state.cartList[shopId] = shopInfo;\n      setLocalCartData(state);\n    },\n\n    // 改变购物车物品选中状态\n    changeCartItemChecked(state, payload) {\n      const {\n        shopId,\n        productId\n      } = payload;\n      const product = state.cartList[shopId].productList[productId];\n      product.check = !product.check;\n      setLocalCartData(state);\n    },\n\n    // 全选功能\n    setCartItemSelect(state, payload) {\n      const {\n        shopId\n      } = payload;\n      const products = state.cartList[shopId].productList;\n\n      if (products) {\n        for (const i in products) {\n          const product = products[i];\n          product.check = true;\n        }\n      }\n\n      setLocalCartData(state);\n    },\n\n    // 清空购物车\n    cleanCartProducts(state, payload) {\n      const {\n        shopId\n      } = payload;\n      state.cartList[shopId].productList = {};\n      setLocalCartData(state);\n    },\n\n    // 完成支付后清空购物车\n    clearCart(state, shopId) {\n      state.cartList[shopId].productList = {};\n    }\n\n  },\n  actions: {},\n  modules: {}\n});","map":{"version":3,"sources":["/Users/mac/Desktop/jingdong/src/store/index.js"],"names":["createStore","setLocalCartData","state","cartList","cartListString","JSON","stringify","localStorage","getLocalCartData","undefined","parse","getters","mutations","changeCartItemInfo","payload","shopId","productId","productInfo","shopInfo","shopName","productList","product","count","number","check","changeShopName","shopNmae","changeCartItemChecked","setCartItemSelect","products","i","cleanCartProducts","clearCart","actions","modules"],"mappings":"AAAA,SAASA,WAAT,QAA4B,MAA5B,C,CAEA;;AACA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAClC,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB;AACA,QAAME,cAAc,GAAGC,IAAI,CAACC,SAAL,CAAeH,QAAf,CAAvB;AACAI,EAAAA,YAAY,CAACJ,QAAb,GAAwBC,cAAxB;AACD,CAJD;;AAMA,MAAMI,gBAAgB,GAAG,MAAM;AAC7B,SAAOD,YAAY,CAACJ,QAAb,KAA0BM,SAA1B,GAAsCJ,IAAI,CAACK,KAAL,CAAWH,YAAY,CAACJ,QAAxB,CAAtC,GAA0E,EAAjF;AACD,CAFD;;AAIA,eAAeH,WAAW,CAAC;AACzBE,EAAAA,KAAK,EAAE;AACL;AACAC,IAAAA,QAAQ,EAAEK,gBAAgB;AAFrB,GADkB;AAKzBG,EAAAA,OAAO,EAAE,EALgB;AAOzBC,EAAAA,SAAS,EAAE;AACTC,IAAAA,kBAAkB,CAAEX,KAAF,EAASY,OAAT,EAAkB;AAClC;AACA,YAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA,SAAV;AAAqBC,QAAAA;AAArB,UAAqCH,OAA3C,CAFkC,CAGlC;;AACA,UAAII,QAAQ,GAAGhB,KAAK,CAACC,QAAN,CAAeY,MAAf,KAA0B;AACvCI,QAAAA,QAAQ,EAAE,EAD6B;AACzBC,QAAAA,WAAW,EAAE;AADY,OAAzC,CAJkC,CAOlC;;AACA,UAAIC,OAAO,GAAGH,QAAQ,CAACE,WAAT,CAAqBJ,SAArB,CAAd,CARkC,CASlC;;AACA,UAAI,CAACK,OAAL,EAAc;AACZA,QAAAA,OAAO,GAAGJ,WAAV;AACAI,QAAAA,OAAO,CAACC,KAAR,GAAgB,CAAhB;AACD,OAbiC,CAclC;;;AACAD,MAAAA,OAAO,CAACC,KAAR,GAAgBD,OAAO,CAACC,KAAR,GAAgBR,OAAO,CAACS,MAAxC;;AACA,UAAIT,OAAO,CAACS,MAAR,GAAiB,CAArB,EAAwB;AAAEF,QAAAA,OAAO,CAACG,KAAR,GAAgB,IAAhB;AAAsB,OAhBd,CAiBlC;;;AACA,UAAIH,OAAO,CAACC,KAAR,GAAgB,CAApB,EAAuB;AACrBD,QAAAA,OAAO,CAACC,KAAR,GAAgB,CAAhB;AACD,OApBiC,CAqBlC;;;AACAJ,MAAAA,QAAQ,CAACE,WAAT,CAAqBJ,SAArB,IAAkCK,OAAlC,CAtBkC,CAuBlC;;AACAnB,MAAAA,KAAK,CAACC,QAAN,CAAeY,MAAf,IAAyBG,QAAzB;AAEAjB,MAAAA,gBAAgB,CAACC,KAAD,CAAhB;AACD,KA5BQ;;AA8BT;AACAuB,IAAAA,cAAc,CAAEvB,KAAF,EAASY,OAAT,EAAkB;AAC9B,YAAM;AAAEC,QAAAA,MAAF;AAAUI,QAAAA;AAAV,UAAuBL,OAA7B;AACA,YAAMI,QAAQ,GAAGhB,KAAK,CAACC,QAAN,CAAeY,MAAf,KAA0B;AACzCW,QAAAA,QAAQ,EAAE,EAD+B;AAC3BN,QAAAA,WAAW,EAAE;AADc,OAA3C;AAGAF,MAAAA,QAAQ,CAACC,QAAT,GAAoBA,QAApB;AACAjB,MAAAA,KAAK,CAACC,QAAN,CAAeY,MAAf,IAAyBG,QAAzB;AAEAjB,MAAAA,gBAAgB,CAACC,KAAD,CAAhB;AACD,KAxCQ;;AA0CT;AACAyB,IAAAA,qBAAqB,CAAEzB,KAAF,EAASY,OAAT,EAAkB;AACrC,YAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA;AAAV,UAAwBF,OAA9B;AACA,YAAMO,OAAO,GAAGnB,KAAK,CAACC,QAAN,CAAeY,MAAf,EAAuBK,WAAvB,CAAmCJ,SAAnC,CAAhB;AACAK,MAAAA,OAAO,CAACG,KAAR,GAAgB,CAACH,OAAO,CAACG,KAAzB;AAEAvB,MAAAA,gBAAgB,CAACC,KAAD,CAAhB;AACD,KAjDQ;;AAmDT;AACA0B,IAAAA,iBAAiB,CAAE1B,KAAF,EAASY,OAAT,EAAkB;AACjC,YAAM;AAAEC,QAAAA;AAAF,UAAaD,OAAnB;AACA,YAAMe,QAAQ,GAAG3B,KAAK,CAACC,QAAN,CAAeY,MAAf,EAAuBK,WAAxC;;AACA,UAAIS,QAAJ,EAAc;AACZ,aAAK,MAAMC,CAAX,IAAgBD,QAAhB,EAA0B;AACxB,gBAAMR,OAAO,GAAGQ,QAAQ,CAACC,CAAD,CAAxB;AACAT,UAAAA,OAAO,CAACG,KAAR,GAAgB,IAAhB;AACD;AACF;;AAEDvB,MAAAA,gBAAgB,CAACC,KAAD,CAAhB;AACD,KA/DQ;;AAiET;AACA6B,IAAAA,iBAAiB,CAAE7B,KAAF,EAASY,OAAT,EAAkB;AACjC,YAAM;AAAEC,QAAAA;AAAF,UAAaD,OAAnB;AACAZ,MAAAA,KAAK,CAACC,QAAN,CAAeY,MAAf,EAAuBK,WAAvB,GAAqC,EAArC;AAEAnB,MAAAA,gBAAgB,CAACC,KAAD,CAAhB;AACD,KAvEQ;;AAyET;AACA8B,IAAAA,SAAS,CAAE9B,KAAF,EAASa,MAAT,EAAiB;AACxBb,MAAAA,KAAK,CAACC,QAAN,CAAeY,MAAf,EAAuBK,WAAvB,GAAqC,EAArC;AACD;;AA5EQ,GAPc;AAqFzBa,EAAAA,OAAO,EAAE,EArFgB;AAuFzBC,EAAAA,OAAO,EAAE;AAvFgB,CAAD,CAA1B","sourcesContent":["import { createStore } from 'vuex'\n\n// 本地存储相关方法\nconst setLocalCartData = (state) => {\n  const { cartList } = state\n  const cartListString = JSON.stringify(cartList)\n  localStorage.cartList = cartListString\n}\n\nconst getLocalCartData = () => {\n  return localStorage.cartList !== undefined ? JSON.parse(localStorage.cartList) : {}\n}\n\nexport default createStore({\n  state: {\n    // 数据格式: {shopId: { shopName: '', productList: { productId: { ... } } }}\n    cartList: getLocalCartData()\n  },\n  getters: {\n  },\n  mutations: {\n    changeCartItemInfo (state, payload) {\n      // 结构传递过来的数据\n      const { shopId, productId, productInfo } = payload\n      // 通过商铺ID获取cartlist中的商铺信息, 判断商铺信息是否存在, 没有的话赋值为默认值\n      let shopInfo = state.cartList[shopId] || {\n        shopName: '', productList: {}\n      }\n      // 获取商铺中的商铺\n      let product = shopInfo.productList[productId]\n      // 判断商品是否存在,不存在则将传递过来的商品productinfo保存到product中,将count赋值为0\n      if (!product) {\n        product = productInfo\n        product.count = 0\n      }\n      // count数值加一\n      product.count = product.count + payload.number\n      if (payload.number > 0) { product.check = true }\n      // count的值小于0则重新赋值为0\n      if (product.count < 0) {\n        product.count = 0\n      }\n      // 将修改过的product放回商铺中,替换原来的数据\n      shopInfo.productList[productId] = product\n      // 将商铺信息存放到cartList中\n      state.cartList[shopId] = shopInfo\n\n      setLocalCartData(state)\n    },\n\n    // 修改传递过来店铺的名字\n    changeShopName (state, payload) {\n      const { shopId, shopName } = payload\n      const shopInfo = state.cartList[shopId] || {\n        shopNmae: '', productList: {}\n      }\n      shopInfo.shopName = shopName\n      state.cartList[shopId] = shopInfo\n\n      setLocalCartData(state)\n    },\n\n    // 改变购物车物品选中状态\n    changeCartItemChecked (state, payload) {\n      const { shopId, productId } = payload\n      const product = state.cartList[shopId].productList[productId]\n      product.check = !product.check\n\n      setLocalCartData(state)\n    },\n\n    // 全选功能\n    setCartItemSelect (state, payload) {\n      const { shopId } = payload\n      const products = state.cartList[shopId].productList\n      if (products) {\n        for (const i in products) {\n          const product = products[i]\n          product.check = true\n        }\n      }\n\n      setLocalCartData(state)\n    },\n\n    // 清空购物车\n    cleanCartProducts (state, payload) {\n      const { shopId } = payload\n      state.cartList[shopId].productList = {}\n\n      setLocalCartData(state)\n    },\n\n    // 完成支付后清空购物车\n    clearCart (state, shopId) {\n      state.cartList[shopId].productList = {}\n    }\n  },\n  actions: {\n  },\n  modules: {\n  }\n})\n"]},"metadata":{},"sourceType":"module"}