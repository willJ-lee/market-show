{"ast":null,"code":"import { createStore } from 'vuex';\nexport default createStore({\n  state: {\n    cartList: {}\n  },\n  getters: {},\n  mutations: {\n    changeCartItemInfo(state, payload) {\n      // 结构传递过来的数据\n      const {\n        shopId,\n        productId,\n        productInfo\n      } = payload; // 通过商铺ID获取cartlist中的商铺信息, 判断商铺信息是否存在, 没有的话赋值为空对象\n\n      let shopInfo = state.cartList[shopId] || {}; // 获取商铺中的商铺\n\n      let product = shopInfo[productId]; // 判断商品是否存在,不存在则将传递过来的商品productinfo保存到product中,将count赋值为0\n\n      if (!product) {\n        product = productInfo;\n        product.count = 0;\n      } // count数值加一\n\n\n      product.count = product.count + payload.number;\n\n      if (payload.number > 0) {\n        product.check = true;\n      } // count的值小于0则重新赋值为0\n\n\n      if (product.count < 0) {\n        product.count = 0;\n      } // 将修改过的product放回商铺中,替换原来的数据\n\n\n      shopInfo[productId] = product; // 将商铺信息存放到cartList中\n\n      state.cartList[shopId] = shopInfo;\n    },\n\n    // 修改传递过来店铺的名字\n    changeShopName(state, payload) {\n      const {\n        shopId,\n        shopName\n      } = payload;\n      const shopInfo = state.cartList[shopId] || {\n        shopNmae: '',\n        productList: {}\n      };\n      shop;\n    },\n\n    // 改变购物车物品选中状态\n    changeCartItemChecked(state, payload) {\n      const {\n        shopId,\n        productId\n      } = payload;\n      const product = state.cartList[shopId][productId];\n      product.check = !product.check;\n    },\n\n    // 全选功能\n    setCartItemSelect(state, payload) {\n      const {\n        shopId\n      } = payload;\n      const products = state.cartList[shopId];\n\n      if (products) {\n        for (const i in products) {\n          const product = products[i];\n          product.check = true;\n        }\n      }\n    },\n\n    // 清空购物车\n    cleanCartProducts(state, payload) {\n      const {\n        shopId\n      } = payload;\n      state.cartList[shopId] = {};\n    }\n\n  },\n  actions: {},\n  modules: {}\n});","map":{"version":3,"sources":["/Users/mac/Desktop/jingdong/src/store/index.js"],"names":["createStore","state","cartList","getters","mutations","changeCartItemInfo","payload","shopId","productId","productInfo","shopInfo","product","count","number","check","changeShopName","shopName","shopNmae","productList","shop","changeCartItemChecked","setCartItemSelect","products","i","cleanCartProducts","actions","modules"],"mappings":"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","sourcesContent":["import { createStore } from 'vuex'\n\nexport default createStore({\n  state: {\n    cartList: {\n    }\n  },\n  getters: {\n  },\n  mutations: {\n    changeCartItemInfo (state, payload) {\n      // 结构传递过来的数据\n      const { shopId, productId, productInfo } = payload\n      // 通过商铺ID获取cartlist中的商铺信息, 判断商铺信息是否存在, 没有的话赋值为空对象\n      let shopInfo = state.cartList[shopId] || {}\n      // 获取商铺中的商铺\n      let product = shopInfo[productId]\n      // 判断商品是否存在,不存在则将传递过来的商品productinfo保存到product中,将count赋值为0\n      if (!product) {\n        product = productInfo\n        product.count = 0\n      }\n      // count数值加一\n      product.count = product.count + payload.number\n      if (payload.number > 0) { product.check = true }\n      // count的值小于0则重新赋值为0\n      if (product.count < 0) {\n        product.count = 0\n      }\n      // 将修改过的product放回商铺中,替换原来的数据\n      shopInfo[productId] = product\n      // 将商铺信息存放到cartList中\n      state.cartList[shopId] = shopInfo\n    },\n\n    // 修改传递过来店铺的名字\n    changeShopName (state, payload) {\n      const { shopId, shopName } = payload\n      const shopInfo = state.cartList[shopId] || {\n        shopNmae: '', productList: {}\n      }\n      shop\n    },\n\n    // 改变购物车物品选中状态\n    changeCartItemChecked (state, payload) {\n      const { shopId, productId } = payload\n      const product = state.cartList[shopId][productId]\n      product.check = !product.check\n    },\n\n    // 全选功能\n    setCartItemSelect (state, payload) {\n      const { shopId } = payload\n      const products = state.cartList[shopId]\n      if (products) {\n        for (const i in products) {\n          const product = products[i]\n          product.check = true\n        }\n      }\n    },\n\n    // 清空购物车\n    cleanCartProducts (state, payload) {\n      const { shopId } = payload\n      state.cartList[shopId] = { }\n    }\n  },\n  actions: {\n  },\n  modules: {\n  }\n})\n"]},"metadata":{},"sourceType":"module"}