{"ast":null,"code":"import { computed } from 'vue';\nimport { useStore } from 'vuex';\nexport const useCommonCartEffect = shopId => {\n  const store = useStore();\n  const cartList = store.state.cartList; // 添加物品逻辑\n\n  const changeCartItemInfo = (shopId, productId, productInfo, number) => {\n    store.commit('changeCartItemInfo', {\n      shopId,\n      productId,\n      productInfo,\n      number\n    });\n  }; // 获取productList\n\n\n  const productList = computed(() => {\n    const productList = cartList[shopId]?.productList;\n    const notEmptyProductList = {};\n\n    for (let i in productList) {\n      const product = productList[i];\n\n      if (product.count > 0) {\n        notEmptyProductList[i] = product;\n      }\n    }\n\n    return notEmptyProductList;\n  }); // 获取shopName\n\n  const shopName = computed(() => {\n    const shopName = cartList[shopId].shopName;\n    return shopName;\n  }); // 购物车物品数量 价格 是否选中状态的相关逻辑\n\n  const calculations = computed(() => {\n    const productList = cartList[shopId]?.productList;\n    let total = 0;\n    let price = 0;\n    let allCheck = true;\n\n    if (productList) {\n      for (const i in productList) {\n        const product = productList[i]; // 计算数量\n\n        total += product.count; // 计算总价\n\n        if (product.check) {\n          price += product.count * product.price;\n        } // 是否全选状态\n\n\n        if (product.count > 0 && !product.check) {\n          allCheck = false;\n        }\n      }\n    }\n\n    return {\n      total,\n      price: price.toFixed(2),\n      allCheck\n    };\n  });\n  return {\n    changeCartItemInfo,\n    cartList,\n    productList,\n    shopName,\n    calculations\n  };\n};","map":{"version":3,"sources":["/Users/mac/Desktop/jingdong/src/effects/cartEffects.js"],"names":["computed","useStore","useCommonCartEffect","shopId","store","cartList","state","changeCartItemInfo","productId","productInfo","number","commit","productList","notEmptyProductList","i","product","count","shopName","calculations","total","price","allCheck","check","toFixed"],"mappings":"AAAA,SAASA,QAAT,QAAyB,KAAzB;AACA,SAASC,QAAT,QAAyB,MAAzB;AAEA,OAAO,MAAMC,mBAAmB,GAAIC,MAAD,IAAY;AAC7C,QAAMC,KAAK,GAAGH,QAAQ,EAAtB;AACA,QAAMI,QAAQ,GAAGD,KAAK,CAACE,KAAN,CAAYD,QAA7B,CAF6C,CAG7C;;AACA,QAAME,kBAAkB,GAAG,CAACJ,MAAD,EAASK,SAAT,EAAoBC,WAApB,EAAiCC,MAAjC,KAA4C;AACrEN,IAAAA,KAAK,CAACO,MAAN,CAAa,oBAAb,EAAmC;AAAER,MAAAA,MAAF;AAAUK,MAAAA,SAAV;AAAqBC,MAAAA,WAArB;AAAkCC,MAAAA;AAAlC,KAAnC;AACD,GAFD,CAJ6C,CAQ7C;;;AACA,QAAME,WAAW,GAAGZ,QAAQ,CAAC,MAAM;AACjC,UAAMY,WAAW,GAAGP,QAAQ,CAACF,MAAD,CAAR,EAAkBS,WAAtC;AACA,UAAMC,mBAAmB,GAAG,EAA5B;;AACA,SAAK,IAAIC,CAAT,IAAcF,WAAd,EAA2B;AACzB,YAAMG,OAAO,GAAGH,WAAW,CAACE,CAAD,CAA3B;;AACA,UAAIC,OAAO,CAACC,KAAR,GAAgB,CAApB,EAAuB;AACrBH,QAAAA,mBAAmB,CAACC,CAAD,CAAnB,GAAyBC,OAAzB;AACD;AACF;;AACD,WAAOF,mBAAP;AACD,GAV2B,CAA5B,CAT6C,CAqB7C;;AACA,QAAMI,QAAQ,GAAGjB,QAAQ,CAAC,MAAM;AAC9B,UAAMiB,QAAQ,GAAGZ,QAAQ,CAACF,MAAD,CAAR,CAAiBc,QAAlC;AACA,WAAOA,QAAP;AACD,GAHwB,CAAzB,CAtB6C,CA2B7C;;AACA,QAAMC,YAAY,GAAGlB,QAAQ,CAAC,MAAM;AAClC,UAAMY,WAAW,GAAGP,QAAQ,CAACF,MAAD,CAAR,EAAkBS,WAAtC;AACA,QAAIO,KAAK,GAAG,CAAZ;AACA,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIC,QAAQ,GAAG,IAAf;;AACA,QAAIT,WAAJ,EAAiB;AACf,WAAK,MAAME,CAAX,IAAgBF,WAAhB,EAA6B;AAC3B,cAAMG,OAAO,GAAGH,WAAW,CAACE,CAAD,CAA3B,CAD2B,CAE3B;;AACAK,QAAAA,KAAK,IAAIJ,OAAO,CAACC,KAAjB,CAH2B,CAI3B;;AACA,YAAID,OAAO,CAACO,KAAZ,EAAmB;AACjBF,UAAAA,KAAK,IAAKL,OAAO,CAACC,KAAR,GAAgBD,OAAO,CAACK,KAAlC;AACD,SAP0B,CAQ3B;;;AACA,YAAIL,OAAO,CAACC,KAAR,GAAgB,CAAhB,IAAqB,CAACD,OAAO,CAACO,KAAlC,EAAyC;AACvCD,UAAAA,QAAQ,GAAG,KAAX;AACD;AACF;AACF;;AACD,WAAO;AAAEF,MAAAA,KAAF;AAASC,MAAAA,KAAK,EAAEA,KAAK,CAACG,OAAN,CAAc,CAAd,CAAhB;AAAkCF,MAAAA;AAAlC,KAAP;AACD,GArB4B,CAA7B;AAuBA,SAAO;AAAEd,IAAAA,kBAAF;AAAsBF,IAAAA,QAAtB;AAAgCO,IAAAA,WAAhC;AAA6CK,IAAAA,QAA7C;AAAuDC,IAAAA;AAAvD,GAAP;AACD,CApDM","sourcesContent":["import { computed } from 'vue'\nimport { useStore } from 'vuex'\n\nexport const useCommonCartEffect = (shopId) => {\n  const store = useStore()\n  const cartList = store.state.cartList\n  // 添加物品逻辑\n  const changeCartItemInfo = (shopId, productId, productInfo, number) => {\n    store.commit('changeCartItemInfo', { shopId, productId, productInfo, number })\n  }\n\n  // 获取productList\n  const productList = computed(() => {\n    const productList = cartList[shopId]?.productList\n    const notEmptyProductList = {}\n    for (let i in productList) {\n      const product = productList[i]\n      if (product.count > 0) {\n        notEmptyProductList[i] = product\n      }\n    }\n    return notEmptyProductList\n  })\n\n  // 获取shopName\n  const shopName = computed(() => {\n    const shopName = cartList[shopId].shopName\n    return shopName\n  })\n\n  // 购物车物品数量 价格 是否选中状态的相关逻辑\n  const calculations = computed(() => {\n    const productList = cartList[shopId]?.productList\n    let total = 0\n    let price = 0\n    let allCheck = true\n    if (productList) {\n      for (const i in productList) {\n        const product = productList[i]\n        // 计算数量\n        total += product.count\n        // 计算总价\n        if (product.check) {\n          price += (product.count * product.price)\n        }\n        // 是否全选状态\n        if (product.count > 0 && !product.check) {\n          allCheck = false\n        }\n      }\n    }\n    return { total, price: price.toFixed(2), allCheck }\n  })\n\n  return { changeCartItemInfo, cartList, productList, shopName, calculations }\n}\n"]},"metadata":{},"sourceType":"module"}